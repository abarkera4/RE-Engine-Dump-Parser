local json = require("dkjson")


local function cleanMethodName(name)
    return name:gsub("(%D+)%d+$", "%1")
end


local function isGeneric(typeInfo)
    return typeInfo.is_generic_type or typeInfo.is_generic_type_definition
end


local function filterRelevantEntries(data)
    local managed, natives, generics = {}, {}, {}
    for typeName, typeInfo in pairs(data) do
        local targetTable
        if isGeneric(typeInfo) then
            targetTable = generics
        else
            local isNative = typeInfo.flags and string.find(typeInfo.flags, "Native")
            targetTable = isNative and natives or managed
        end


        if typeInfo.methods then
            targetTable[typeName] = typeInfo
        end
    end
    return managed, natives, generics
end


local function writeLuaModule(typesTable, moduleName)
    local file = io.open(moduleName .. ".lua", "w")
    if not file then error("Could not write to file: " .. moduleName .. ".lua") end

    file:write("--- Autogenerated module based on JSON data\n")
    file:write("--- @module " .. moduleName .. "\n\n")

    for typeName, typeInfo in pairs(typesTable) do
        file:write("local " .. typeName .. " = {\n")


        if typeInfo.parent then
            file:write("    Parent = " .. typeInfo.parent .. ",\n")
        end

        file:write("    Methods = {\n")
        for methodName, methodInfo in pairs(typeInfo.methods) do
            local cleanedName = cleanMethodName(methodName)
            file:write("        " .. cleanedName .. " = function(self")

            file:write(") end, -- Return type: " .. (methodInfo.returns and methodInfo.returns.type or "void") .. "\n")
        end
        file:write("    },\n")
        file:write("}\n\n")
    end

    file:write("return {\n")
    for typeName, _ in pairs(typesTable) do
        file:write("    " .. typeName .. " = " .. typeName .. ",\n")
    end
    file:write("}\n")
    file:close()

    print(moduleName .. " module has been generated.")
end


local function parseJson(filename)
    local file = io.open(filename, "r")
    if not file then error("Could not open file: " .. filename) end
    local content = file:read("*all")
    file:close()

    local data, _, err = json.decode(content, 1, nil)
    if not data then
        error("Error parsing JSON: " .. err)
    end
    return data
end


local function createLuaLibrary(jsonFilename, managedModuleName, nativeModuleName, genericModuleName)
    local data = parseJson(jsonFilename)
    local managedData, nativeData, genericData = filterRelevantEntries(data)
    writeLuaModule(managedData, managedModuleName)
    writeLuaModule(nativeData, nativeModuleName)
    writeLuaModule(genericData, genericModuleName)
end

createLuaLibrary("il2cpp_dump.json", "ManagedModuleTest2", "NativeModuleTest2", "GenericModuleTest2")
